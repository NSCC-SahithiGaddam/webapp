name: Integration Test and Packer Build
on:
  push:
    branches:
      - main
jobs:
  ami-build:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Run Node.js project
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Wait for MySQL to be ready
        run: |
          until nc -z -v -w30 localhost 3306
          do
            echo "Waiting for MySQL to be ready..."
            sleep 5
          done
      - name: Install project dependencies
        run: npm install
      - name: Set up .env
        run: echo "${{ secrets.ENV_FILE_CONTENT }}" > .env
      - name: Run Integration tests 
        run: npm test
      - name: Build Artifats
        run: npm run build
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          aws-profile: git
      - name: Install Packer
        run: |
          wget https://releases.hashicorp.com/packer/1.8.5/packer_1.8.5_linux_amd64.zip
          unzip packer_1.8.5_linux_amd64.zip
          sudo mv packer /usr/local/bin/packer
          packer --version
        shell: bash
      - name: Init Packer
        run: packer init .
      - name: Build Packer
        run: packer build .
      - name: Get Latest AMI 
        run: |
          latest_ami_id=$(aws ec2 describe-images \
          --owners self \
          --filters "Name=name,Values=csye6225_*" "Name=state,Values=available" \
          --query "Images | sort_by(@, &CreationDate) | [-1].ImageId" \
          --output text) 
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1
          aws-profile: git-user
      - name: Get Existing Launch Template ID
        run: |
          launch_template_id=$(aws ec2 describe-launch-templates \
          --launch-template-names demoTemplate \
          --query "LaunchTemplates[0].LaunchTemplateId" \
          --output text)
      - name: Create Launch Template
        run: |
          aws ec2 create-launch-template-version \
          --launch-template-id $launch_template_id \
          --version-description "Version 2" \
          --launch-template-data '{"ImageId":$latest_ami_id}' \
          --source-version 1
      - name: Update Autoscaling group
        run: |
          aws ec2 update-auto-scaling-group \
          --auto-scaling-group-name demoasg \
          --launch-template LaunchTemplateId=launch_template_id,Version='$Latest'
      - name: Instance Refresh
        run: |
          aws ec2 start-instance-refresh \
          --auto-scaling-group-name demoasg

          while true; do
          refresh_status=$(aws autoscaling describe-instance-refreshes \
            --auto-scaling-group-name demoasg \
            --query "InstanceRefreshes[*].Status" \
            --output text)
          
          if [ "$refresh_status" == "Successful" ]; then
            echo "Instance refresh completed successfully."
            break
          elif [ "$refresh_status" == "Failed" ]; then
            echo "Instance refresh failed."
            exit 1
          else
            echo "Instance refresh is still in progress. Waiting..."
            sleep 60
          fi
          done



